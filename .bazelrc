# Disable Bazel module support.
common --noenable_bzlmod

# Sets the default Apple platform to macOS.
build --apple_platform_type=macos

# MiniMIP default bazel build setup.
build --show_timestamps
build --color=yes
build --keep_going

# TODO(lpawel): With c++20 or c++2a there was an error on 2023/10/03:
#
# /usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/chrono:2320:48:
# error: call to consteval function 'std::chrono::hh_mm_ss::_S_fractional_width'
# is not a constant expression
#
# This is likely due to old `clang` in my toolchain. Note, however, that OR-Tools
# are compatible with C++17 (and do not support C++20 yet). Hence, it's actually
# safer to stay with C++17 for a while (it shouldn't matter in practice that much
# anyway).
build --enable_platform_specific_config

# Configure C++ compilation options.
build:linux --repo_env="CC=clang" --cxxopt="--std=c++17" --cxxopt=-Wno-sign-compare --host_cxxopt="-std=c++17" --host_cxxopt=-Wno-sign-compare
build:macos --cxxopt="-std=c++17" --cxxopt=-Wno-sign-compare --cxxopt=-mmacos-version-min=10.15  --cxxopt=-Wno-dangling-field --features=-supports_dynamic_linker

# Debug build settings.
build:debug -c dbg
build:debug --copt="-g"
build:debug --strip="never"

# Enable verbose failures for build and test commands.
build --verbose_failures
build --subcommands=pretty_print
#test --verbose_failures

# Increase verbosity level for test logs.
#test --test_output=all --test_arg=--v=3

# Import user-specific options from .bazelrc.user if it exists.
try-import %workspace%/.bazelrc.user

# Enable sandboxed memory safety checks for test actions.
#test --sandbox_debug
#test --copt="-fsanitize=address"
#test --linkopt="-fsanitize=address"
