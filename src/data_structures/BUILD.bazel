# Building minimip libraries.
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")

# All other packages in MiniMIP may use any of the testing utils.
package(default_visibility = ["//visibility:public"])

cc_library(
    name = "solver",
    hdrs = ["solver.h"],
    deps = [
        ":mip_data",
        "//src/lp_interface:lpi",
    ],
)

cc_library(
    name = "mip_data",
    srcs = ["mip_data.cc"],
    hdrs = ["mip_data.h"],
    deps = [
        ":problem",
        ":strong_sparse_matrix",
    ],
)

cc_library(
    name = "problem",
    srcs = ["problem.cc"],
    hdrs = ["problem.h"],
    deps = [
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "strong_sparse_matrix",
    hdrs = ["strong_sparse_matrix.h"],
    srcs = ["strong_sparse_matrix.cc"],
    deps = [
        ":strong_sparse_vector",
        "@com_google_ortools//ortools/base",
        "@com_google_ortools//ortools/base:strong_vector",
        "@com_google_ortools//ortools/util:strong_integers",
        "@com_google_ortools//ortools/lp_data:base",
    ],
)

cc_library(
    name = "strong_sparse_vector",
    hdrs = ["strong_sparse_vector.h"],
    deps = [
        "@com_google_ortools//ortools/base",
        "@com_google_ortools//ortools/base:strong_vector",
        "@com_google_ortools//ortools/util:strong_integers",
    ],
)
