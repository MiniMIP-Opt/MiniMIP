# Building minimip libraries.
load("@rules_cc//cc:defs.bzl", "cc_library")

# All other packages in MiniMIP may use any of the testing utils.
package(default_visibility = ["//visibility:public"])

cc_library(
    name = "cuts_generator",
    hdrs = ["cuts_generator.h"],
    deps = [
        "//src:parameters_cc_proto",
        "//src/data_structures:cuts_data",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "generator_factory",
    hdrs = ["generator_factory.h"],
    deps = [
        "//src:parameters_cc_proto",
        "//src/cutting_interface:aggregating_generator",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ]
)

cc_library(
    name = "aggregating_generator",
    srcs = ["aggregating_generator.cc"],
    hdrs = ["aggregating_generator.h"],
    deps = [
        "//src:solver_context_interface",
        "//src/cutting_interface:cuts_generator",
        "//src/lp_interface:lpi",
        "@com_google_ortools//ortools/base:status_macros",
    ],
)

cc_library(
    name = "cuts_runner",
    hdrs = ["cuts_runner.h"],
    deps = [
        ":cuts_selector",
        ":cuts_generator",
        "//src/data_structures:cuts_data",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "default_runner",
    srcs = ["default_runner.cc"],
    hdrs = ["default_runner.h"],
    deps = [
        ":selector_factory",
        ":generator_factory",
        "//src/cutting_interface:cuts_runner",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "runner_factory",
    hdrs = ["runner_factory.h"],
    deps = [
        "//src/cutting_interface:default_runner",
        "//src:parameters_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ]
)

cc_library(
    name = "cuts_selector",
    hdrs = ["cuts_selector.h"],
    deps = [
        "//src/data_structures:cuts_data",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_ortools//ortools/base:status_macros",
    ],
)

cc_library(
    name = "hybrid_selector",
    srcs = ["hybrid_selector.cc"],
    hdrs = ["hybrid_selector.h"],
    deps = [
        "//src:solver_context_interface",
        "//src/cutting_interface:cuts_selector",
        "//src/lp_interface:lpi",
        "@com_google_ortools//ortools/base:status_macros",
    ],
)

cc_library(
    name = "selector_factory",
    hdrs = ["selector_factory.h"],
    deps = [
        "//src/cutting_interface:hybrid_selector",
        "//src:parameters_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ]
)
