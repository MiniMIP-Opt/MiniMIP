// Copyright 2024 the MiniMIP Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package minimip;

// This generator extracts rows from the optimal tableau and rounds the resulting coefficients
// according to different formulas.
// For more information, see Achterberg: Constraint Integer Programming (2006), ch 8.3-8.4.
message TableauRoundingGeneratorParameters {

  // Toggle which rounding procedures to apply to the optimal tableau row. At least one must be used.
  optional bool use_mixed_integer_rounding = 1 [default = true];
  optional bool use_strong_cg_rounding = 2 [default = true];
}

message CutGeneratorParameters {

  // The maximum number of cuts this CutGenerator should add per separation round. Zero value means
  // the CutGenerator is turned off.
  optional int32 max_num_cuts = 1 [default = 100];

  oneof generator_specific {
    TableauRoundingGeneratorParameters tableau_rounding_generator_parameters = 2;
  }

}

// This selector scores cuts via the weighted sum of efficacy, directed cutoff distance, objective parallelism,
// and integer support.
message HybridSelectorParameters {

  // The coefficients for the weighted sum of the scoring metrics.
  optional double efficacy_weight = 1 [default = 1.0];
  optional double objective_parallelism_weight = 2 [default = 0.1];
  optional double integer_support_weight = 3 [default = 0.1];

  // The minimum orthogonality between cuts for a cut to enter the LP.
  optional double minimum_orthogonality = 4 [default = 0.9];
  optional double minimum_orthogonality_at_root = 5 [default = 0.9];

  // To toggle whether to use the signed cosine angle for filtering parallel cuts,
  // otherwise the absolute cosine angle is used to evaluate pairwise cut parallelism.
  optional bool signed_orthogonality = 6 [default = false];

  // The thresholds for good and bad cut scores.
  optional double score_threshold = 7 [default = 0.000001];

  // The maximum tree depth at which the selector is active, -1 means no limit.
  optional int64 maximum_tree_depth = 8 [default = -1];

}

message CutSelectorParameters {

  // The maximum number of cuts this Selector should add per separation round. Zero value means
  // the Selector is turned off, -1 means no limit.
  optional int32 max_num_cuts = 1 [default = -1];

  oneof selector_specific {
    HybridSelectorParameters hybrid_selector_parameters = 2;
  }

}

// Cutrunner Parameters
message DefaultRunnerParameters {
  optional int32 max_iterations = 1 [default = 100];
  optional int32 max_num_cuts = 2 [default = 100];
  optional int32 max_num_cuts_root = 3 [default = 100];
}

message CutRunnerParameters {

  repeated CutGeneratorParameters generator_parameters = 1;
  repeated CutSelectorParameters selector_parameters = 2;

  oneof runner_specific {
    DefaultRunnerParameters default_runner_parameters = 3;
  }

}

message RandomBranchingParameters {
  // This parameter has no effect and is purely demonstrative.
  optional int32 random_seed = 1 [default = 0];
}

message MaxFractionalBranchingParameters {
  // Add relevant MaxFractionalBranchingParameters here.
}

message BranchingParameters {
  // Add general BranchingParameters here, that should be expected for all branching strategies.

  oneof branching_specific {
    RandomBranchingParameters random_branching_parameters = 1;
    MaxFractionalBranchingParameters max_fractional_branching_parameters = 2;
  }

}

message LpParameters {
  // The underlying solver to use. Note that some parameters behave differently
  // depending on the solver type.
  enum SolverType {
    LP_GLOP = 0;
    LP_SOPLEX = 1;
  }
  optional SolverType lp_solver_type = 1 [default = LP_GLOP];

  // Whether to start solving` from scratch. If false, the underlying LP solver
  // will attempt to leverage incrementalism (if possible).
  optional bool solve_from_scratch = 2 [default = false];

  // What kind of scaling the LP solver should use. All solvers may not support
  // all scaling strategies.
  enum ScalingStrategy {
    SCALING_OFF = 0;  // No scaling at all.
    SCALING_DEFAULT = 1;  // LP Solver's default scaling strategy.
    SCALING_EQUILIBRATION = 2;
    SCALING_LEAST_SQUARES = 3;
    SCALING_LINEAR_PROGRAM = 4;
  }
  optional ScalingStrategy scaling_strategy = 3 [default = SCALING_DEFAULT];

  // Should the LP solver use presolving?
  optional bool use_presolve = 4 [default = true];

  // Pricing strategy. All solvers may not support all pricing strategies.
  enum PricingStrategy {
    PRICING_DEFAULT = 0;  // LP solver's default pricing strategy.
    PRICING_STEEPEST_EDGE = 1;
    PRICING_STEEPEST_EDGE_QUICK_START = 2;
    PRICING_DANTZIG = 3;
    PRICING_PARTIAL_DANTZIG = 4;
    PRICING_DEVEX = 5;
  }
  optional PricingStrategy pricing_strategy = 5 [default = PRICING_DEFAULT];

  // Feasibility tolerance for primal variables and slacks (aka just feasibility
  // tolerance). Set to -1 to use LP solver's default tolerance. Must be
  // non-negative or -1.
  optional double feasibility_tolerance = 6 [default = -1.0];

  // Feasibility tolerance for dual variables and slacks (aka optimality
  // tolerance). Set to -1 to use LP solver's default tolerance. Must be
  // non-negative or -1.
  optional double optimality_tolerance = 7 [default = -1.0];

  // Minimal Markowitz threshold in LU factorization. Must be between 0 and 1
  // (or -1 to use LP solver's default), though LP solver may choose to clip
  // the value (e.g., SoPlex requires this to be between 1e-4 and 1 - 1e-4).
  optional double min_markowitz_threshold = 8 [default = -1];

  // Refactorization interval. Set to 0 to let the LP solver determine the
  // refactorization interval automatically. Must be non-negative.
  optional int32 refactorization_interval = 9 [default = 0];

  // The LP solver stops when the objective value gets smaller than this value.
  // Note, LP solver may trim this wrt their definition of infinity.
  optional double objective_lower_limit = 10 [default = -inf];

  // The LP solver stops when the objective value gets larger than this value.
  // Note, LP solver may trim this wrt their definition of infinity.
  optional double objective_upper_limit = 11 [default = inf];

  // Timing mode and limit. Not all solvers support all timing modes.
  // If `timing_mode` is TIMING_OFF, no limit is imposed.
  // Note, LP solver may trim `time_limit` wrt their definition of infinity.
  enum TimingMode {
    TIMING_OFF = 0;
    TIMING_WALLCLOCK = 1;
    TIMING_CPU = 2;
    TIMING_DETERMINISTIC = 3;
  }
  optional TimingMode timing_mode = 12 [default = TIMING_OFF];
  optional double time_limit = 13 [default = inf];

  // Iteration limit for the LP solver. Set to 0 to impose no limit. Must be
  // non-negative.
  optional int32 iteration_limit = 14 [default = 0];

  // Number of thread to use. Set to 0 to let the LP solver determine the number
  // of threads automatically. Must be non-negative.
  optional int32 num_threads = 15 [default = 0];

  // Initial random seed, which may affects e.g. perturbations in the simplex.
  // Set to 0 to use the solver default. Must be non-negative.
  optional int32 random_seed = 16 [default = 0];

  // If true, the solver prints extra debugging information to the console.
  optional bool enable_internal_solver_output = 17 [default = false];
}

message MiniMipParameters {
  // A value v is considered integral within MiniMip if
  // abs(v - round(v)) <= integrality_tolerance.
  optional double integrality_tolerance = 1 [default = 1e-6];

  // A value v is considered equal to zero within MiniMip if
  // abs(v) <= numerical_tolerance.
  optional double numerical_tolerance = 2 [default = 1e-9];

  // Parameters to forward to the underlying LP solver. These will be used to
  // instantiate the "main" LP solver in MiniMip (i.e., the one used to solve
  // nodes' relaxations while exploring the search tree).
  optional LpParameters lp_parameters = 3;

  optional CutRunnerParameters cut_runner = 4;

  repeated CutGeneratorParameters cut_generators = 5;

  repeated CutSelectorParameters cut_selectors = 6;

  // Maximal number of consecutive infeasible nodes in a single "plunge".
  // A plunge is a path of exploring the search tree somewhere from the "top" (the root or close to root)
  // in depth-search manner (which preserves LP simplex incrementality).
  // If set to 0, the solver will back-jump somewhere to the top of the tree immediately after
  // encountering an infeasible node. If set to 1, on encountering an infeasible node,
  // the solver will explore its sibling node (and only if this one is also infeasible, it will back-jump).
  // With values >1, the solver will back-track level-by-level (until a feasible node is found, or the limit is hit).
  // Set to -1 to always back-track (and don't back-jump at all).

  optional int32 backtrack_limit = 7 [default = 2];

  optional BranchingParameters branching_parameters = 10;
}
