# Building minimip libraries.
load("@rules_cc//cc:defs.bzl", "cc_library")

# All other packages in MiniMIP may use any of the testing utils.
package(default_visibility = ["//visibility:public"])

cc_library(
    name = "branching_interface",
    hdrs = ["branching_interface.h"],
    deps = [
        "//minimip/data_structures:mip_types",
        "//minimip:parameters_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "random_branching",
    hdrs = ["random_branching.h"],
    srcs = ["random_branching.cc"],
    deps = [
        ":branching_interface",
        "//minimip:parameters_cc_proto",
        "//minimip:solver_context_interface",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "maxfractional_branching",
    hdrs = ["maxfractional_branching.h"],
    srcs = ["maxfractional_branching.cc"],
    deps = [
        ":branching_interface",
        "//minimip:parameters_cc_proto",
        "//minimip:solver_context_interface",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "branching_factory",
    hdrs = ["branching_factory.h"],
    deps = [
        ":random_branching",
        ":maxfractional_branching",
        "//minimip:parameters_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)